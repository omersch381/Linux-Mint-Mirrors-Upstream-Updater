import urllib.request as request
from shutil import copyfile

from bs4 import BeautifulSoup

from config import Config
from logger import Logger
from parser import Parser
from constants import *

logger = Logger(__name__)
logger = logger.logger
config = Config()


class ArchParser(Parser):
    """This class handles the Arch mirrors.

    It receives a url, sends a get request (similar to wget), parses the html file into mirrors.
    It also switches the default mirror to the fastest.
    """

    def __init__(self, url, upstream_package_file_path=config.get_default_value_of(ARCH_SECTION,
                                                                                   UPSTREAM_MIRRORS_LOCATION)):
        self._url = url
        self._upstream_package_file_path = upstream_package_file_path
        self._raw_mirrors = None
        self._list_of_mirrors = None

    @property
    def url(self):
        return self._url

    @property
    def list_of_mirrors(self):
        return self._list_of_mirrors

    def parse_mirrors(self):
        """Gets the mirrors and parses them.

        This method gets the Arch upstream mirrors with an http request and
        parses the html into list of mirrors.

        :returns (list): self._list_of_mirrors
        """

        html_content = request.urlopen(self._url)

        soup = BeautifulSoup(html_content, 'html.parser')

        self._raw_mirrors = str(soup).splitlines()

        self._list_of_mirrors = [line.split('/')[2] for line in self._raw_mirrors if '#Server' in line]
        logger.debug(f'The mirrors we parsed are:\n{self._list_of_mirrors}')

        return self._list_of_mirrors

    def switch_to_fastest_mirror(self, mirror):
        """Switches to fastest mirror.

        This method gets the fastest mirror, backs up the upstream mirrors file and puts the
        fastest mirror as the default mirror.

        :param mirror: the fastest mirror which was returned from our pinger.
        """

        # Saving a backup of the configuration file
        copyfile(self._upstream_package_file_path, self._upstream_package_file_path + '.bak')
        logger.debug('Original upstream file was at ' + self._upstream_package_file_path)
        logger.debug('Upstream file was backed up at ' + self._upstream_package_file_path + '.bak')

        abstract = """
################################################################################
################# Arch Linux mirrorlist generated by mirror_manager ############
################################################################################
        
"""
        for full_mirror in self._raw_mirrors:
            if mirror in full_mirror:
                mirror = full_mirror[1:] + '\n'

        mirrors_file_content = abstract + mirror
        with open(self._upstream_package_file_path, 'w') as file:
            file.write(mirrors_file_content)
